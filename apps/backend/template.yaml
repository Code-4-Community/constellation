# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  backend

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  # Defines an IAM role for Lambdas that allows them to:
  # 1. interact with the QLDB transactional data API
  # 2. create CloudWatch logs (using an AWS managed IAM policy)
  QLDBSendCommandRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: QLDBSendCommandRole 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role to provide access to the QLDB transactional data API
      Policies:
        - PolicyName: QLDBSendCommandPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "qldb:SendCommand"
                  - "qldb:PartiQL*"
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get.js
  getFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handlers/get.getHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method that returns "Hello world!".
      Role: !GetAtt QLDBSendCommandRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # This is a Lambda function config associated with the source code: getAllForms.ts
  getFormsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handlers/getAllForms.getAllFormsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: An http get method to get all forms.
      Role: !GetAtt QLDBSendCommandRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /forms
            Method: GET
    
  # This is a Lambda function config associated with the source code: putForm.ts
  putFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/handlers/putForm.putFormHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: An HTTP post method to add one form to the QLDB table.
      Role: !GetAtt QLDBSendCommandRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /form
            Method: POST

  # Creates an AWS KMS key to encrypt/decrypt data in QLDB
  # the key policy gives root account users key management permissions
  # and gives the IAM role given to the Lambdas permission to use the key (necessary to interact with QLDB)
  QLDBKey:
    Type: 'AWS::KMS::Key'
    Properties:
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: 2012-10-17
        Id: key-policy-id
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt QLDBSendCommandRole.Arn
            Action: 'kms:*'
            Resource: '*'

  myQLDBLedger:
    Type: AWS::QLDB::Ledger
    Properties: 
      DeletionProtection: false #TODO: change to true for prod, set to false so we can delete the entire stack during the development process
      KmsKey: !Ref QLDBKey
      Name: TestLedger
      PermissionsMode: STANDARD

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
